% These should conflict
{
    var x, x : int;
};

% These should conflict
{
    var x : int;
    var x : int;
};

% These should conflict
{
    var x : int;
    fun x() : int { return 3; };
};

% These should conflict
{
    fun f(x : int) : int {
        var x : int;
        return x;
    };
};

% These should conflict
{
    data x = #NIL;
    data x = #NIL;
};

% These should conflict
{
    data x = #NIL | #NIL;
};

% These should conflict
{
    data x = #NIL | #NIL of x;
};

% These should conflict
{
    fun f(x : int) : bool { return true; };
    fun f(x : int) : int { return 0; };

    var x : bool;
    x := f(2);
};

% These should not conflict
{
    var x : int;
    { var x : int; };
};

% These should not conflict
{
    data x = #NIL;
    var x : x;
};

% These should not conflict and the proper functions should be used
{
    fun f(x : int) : bool { return true; };
    fun f(x : bool) : bool { return false; };

    print f(1);
    print f(false);
};

% These should not conflict and the proper constructors should be used
{
    data x = #NIL;
    data y = #NIL;

    var x : x;
    var y : y;

    x := #NIL;
    y := #NIL;
};

% The proper constructors should be inferred here such that the case statement matches using the d4
% type
{
    data d1 = #CONS;
    data d2 = #CONS;
    data d3 = #CONS of d1 * d2;
    data d4 = #CONS of d3 * d2;
    data d5 = #CONS of d1 * d1;

    %    d4   (d3   (d1   , d2   ), d2   )
    case #CONS(#CONS(#CONS, #CONS), #CONS) of { #CONS(a, b) => {} };
};
